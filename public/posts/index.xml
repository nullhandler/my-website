<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Peratchiselvan (Selva)</title>
        <link>https://selvasoft.in/posts/</link>
        <description>Recent content in Posts on Peratchiselvan (Selva)</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Thu, 11 Apr 2019 12:35:43 +0530</lastBuildDate>
        <atom:link href="https://selvasoft.in/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Best Python Script I Ever Created</title>
            <link>https://selvasoft.in/posts/best-python-script-i-ever-created/</link>
            <pubDate>Thu, 11 Apr 2019 12:35:43 +0530</pubDate>
            
            <guid>https://selvasoft.in/posts/best-python-script-i-ever-created/</guid>
            <description>After my first semester exams in college (Computer Science Engineering, of course!) was over, we got the results.
Fortunately, I got good marks. I eagerly wanted to know what my rank was.
But, I didn’t want to ask each and every person to about their score. We studied Python in our first semester (But I knew python before it) .
So, I thought like to make a python script to scrape all the grades and CGPA of my classmates.</description>
            <content type="html"><![CDATA[<p>After my first semester exams in college (Computer Science Engineering, of course!) was over, we got the results.</p>

<p>Fortunately, I got good marks. I eagerly wanted to know what my rank was.</p>

<p>But, I didn’t want to ask each and every person to about their score. We studied Python in our first semester (But I knew python before it) .</p>

<p>So, I thought like to make a python script to scrape all the grades and CGPA of my classmates.</p>

<p>The script only needs the starting Register Number and Ending Register Number. It will scrape all of it and put it in a Spreadsheet.</p>

<p>You can see the spread sheet in the below screenshot. (Names are blurred for privacy reasons.</p>

<p><img src="https://qph2.c7.quoracdn.net/main-qimg-e0a9991188937aa698deb3fc2f0d91b1" alt="image" /></p>

<p>It was the best python script I have ever written.</p>

<p>I open sourced it in github. See the embedded version.</p>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Created by Selva</span>
<span style="color:#75715e"># Made with ❤ in Selvasoft</span>
 
<span style="color:#f92672">from</span> bs4 <span style="color:#f92672">import</span> BeautifulSoup
<span style="color:#f92672">import</span> requests
 
<span style="color:#e6db74">&#34;&#34;&#34; Python Program to get all students grades with CGPA.
</span><span style="color:#e6db74"> Note: Install BeautifulSoup Module and Requests Module
</span><span style="color:#e6db74"> before running this program!!!&#34;&#34;&#34;</span>
 
csv_file <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;CGPA_Provided_by_Selva.csv&#34;</span>,<span style="color:#e6db74">&#34;w&#34;</span>)
<span style="color:#75715e"># This is example Reg. No. College code is fake :P</span>
reg_start <span style="color:#f92672">=</span> <span style="color:#ae81ff">123417103001</span> <span style="color:#75715e"># Enter starting Reg. number</span>
reg_end <span style="color:#f92672">=</span> <span style="color:#ae81ff">123417103027</span> <span style="color:#75715e"># Ending Reg. number</span>
<span style="color:#75715e"># Found the Database URL after a long time. :) </span>
url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;http://aucoe.annauniv.edu/cgi-bin/result/cgrade.pl?regno=&#34;</span>
 
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">write_csv</span>(list1):
 <span style="color:#75715e"># Function to write in CSV</span>
 <span style="color:#66d9ef">for</span> word <span style="color:#f92672">in</span> list1:
 csv_file<span style="color:#f92672">.</span>write(str(word)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,&#34;</span>)
 csv_file<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
<span style="color:#75715e"># Write the Table Titles</span>
write_csv([<span style="color:#e6db74">&#39;Name&#39;</span>,<span style="color:#e6db74">&#39;Phy Lab&#39;</span>,<span style="color:#e6db74">&#39;Chemistry&#39;</span>,<span style="color:#e6db74">&#39;Python&#39;</span>,<span style="color:#e6db74">&#39;EG&#39;</span>,<span style="color:#e6db74">&#39;Py Lab&#39;</span>,<span style="color:#e6db74">&#39;English&#39;</span>,<span style="color:#e6db74">&#39;Maths&#39;</span>,<span style="color:#e6db74">&#39;Physics&#39;</span>,<span style="color:#e6db74">&#39;CGPA&#39;</span>])
 
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_cgpa</span>(mylist):
 <span style="color:#75715e"># CGPA Calculator Algorithm</span>
 <span style="color:#75715e"># Took hours to make :P</span>
 points <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">3</span>]
 credit <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;O&#34;</span>: <span style="color:#ae81ff">10</span>, <span style="color:#e6db74">&#34;A+&#34;</span>: <span style="color:#ae81ff">9</span>, <span style="color:#e6db74">&#34;A&#34;</span>: <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#39;B+&#39;</span>: <span style="color:#ae81ff">7</span>, <span style="color:#e6db74">&#39;B&#39;</span>: <span style="color:#ae81ff">6</span>}
 total_credits <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
 my_credits <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
 <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>):
 <span style="color:#66d9ef">if</span> credit<span style="color:#f92672">.</span>__contains__(mylist[i]):
 my_credits <span style="color:#f92672">=</span> my_credits <span style="color:#f92672">+</span> (credit[mylist[i]] <span style="color:#f92672">*</span> points[i])
 total_credits <span style="color:#f92672">=</span> total_credits <span style="color:#f92672">+</span> (points[i] <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>)
 <span style="color:#66d9ef">try</span>:
 cgpa <span style="color:#f92672">=</span> my_credits <span style="color:#f92672">/</span> total_credits <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>
 <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">ZeroDivisionError</span>:
	<span style="color:#75715e"># Occurs when someone is absent in all subjects.</span>
 <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
 <span style="color:#66d9ef">return</span> round(cgpa, <span style="color:#ae81ff">2</span>)
 
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(reg_start,reg_end<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
 data_list <span style="color:#f92672">=</span> []
 soup <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(url<span style="color:#f92672">+</span>str(i))
 <span style="color:#75715e"># Idk what to name the variable :P</span>
 selva <span style="color:#f92672">=</span> BeautifulSoup(soup<span style="color:#f92672">.</span>text,<span style="color:#e6db74">&#34;html.parser&#34;</span>)
 td <span style="color:#f92672">=</span> selva<span style="color:#f92672">.</span>find_all(<span style="color:#e6db74">&#34;td&#34;</span>)
 tables <span style="color:#f92672">=</span> td[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>find_all(<span style="color:#e6db74">&#34;table&#34;</span>)
 strongs <span style="color:#f92672">=</span> tables[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>find_all(<span style="color:#e6db74">&#34;strong&#34;</span>)
 table_2 <span style="color:#f92672">=</span> tables[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>find_all(<span style="color:#e6db74">&#34;strong&#34;</span>)
 no <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>
 name <span style="color:#f92672">=</span> strongs[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>string
 data_list<span style="color:#f92672">.</span>append(name)
 <span style="color:#75715e"># Print progress with name</span>
 <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Completed for &#34;</span><span style="color:#f92672">+</span>name)
 <span style="color:#66d9ef">while</span> no <span style="color:#f92672">&lt;</span> len(table_2):
 <span style="color:#66d9ef">print</span>(table_2[no]<span style="color:#f92672">.</span>string)
 data_list<span style="color:#f92672">.</span>append(table_2[no]<span style="color:#f92672">.</span>string)
 no <span style="color:#f92672">=</span> no <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>
 data_list<span style="color:#f92672">.</span>append(calculate_cgpa(data_list))
 write_csv(data_list)
 
csv_file<span style="color:#f92672">.</span>close()</code></pre></div>

<p>You can see the code also in this <a href="https://github.com/Peratchiselvan/PythonProjects/blob/master/mark.py" target="_blank">github link</a>.</p>

<p>And the most Important thing is I got the lowest mark in my python exam. I did very well. I can tell , that the teacher corrected my paper have less knowledge to understand what I wrote. :(</p>

<p>Regards,</p>

<p>Selva.</p>
]]></content>
        </item>
        
        <item>
            <title>Creating Command Line Torrent Searcher</title>
            <link>https://selvasoft.in/posts/creating-command-line-torrent-searcher/</link>
            <pubDate>Mon, 01 Apr 2019 13:01:07 +0530</pubDate>
            
            <guid>https://selvasoft.in/posts/creating-command-line-torrent-searcher/</guid>
            <description>Its been difficult to search torrents in the web these days. So, I planned to create a torrent searching script using python. First of all, we need asource to scrap the torrents.
I use the following torrent websites:
 The Pirate Bay snowfl Skytorrents  Review The Pirate Bay proxies are banned pretty quickly. So, its waste to use them.
Snowfl is great since that website itself scraps torrents from tpb and 1337x etc&amp;hellip; But there is no way to provide search arguments in the url.</description>
            <content type="html"><![CDATA[

<p>Its been difficult to search torrents in the web these days.
So, I planned to create a torrent searching script using python.
First of all, we need asource to scrap the torrents.</p>

<p>I use the following torrent websites:</p>

<ul>
<li><a href="https://thepiratebay.org" target="_blank">The Pirate Bay</a></li>
<li><a href="https://snowfl.com" target="_blank">snowfl</a></li>
<li><a href="https://skytorrents.to/" target="_blank">Skytorrents</a></li>
</ul>

<h1 id="review">Review</h1>

<p>The Pirate Bay proxies are banned pretty quickly. So, its waste to use them.</p>

<p>Snowfl is great since that website itself scraps torrents from tpb and 1337x etc&hellip;
But there is no way to provide search arguments in the url.</p>

<p>( Like <code>https://google.com/?q=search+term</code> )</p>

<p>Next option is skytorrents. Darn, It even got rss to search. I planned to use it.</p>

<h1 id="creation">Creation</h1>

<p>The base url for rss search is <code>https://skytorrents.to/rss?search=search+term</code></p>

<p>I tried to parse it using <a href="https://pypi.org/project/feedparser/" target="_blank">feedparser</a> library in python.</p>

<p>F**k, the seeders and leechers in the rss feed are in the torznab attribute
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;category&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;movie&#34;</span><span style="color:#f92672">/&gt;</span>
<span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;category&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;1080&#34;</span><span style="color:#f92672">/&gt;</span>
<span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;category&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;YiFY&#34;</span><span style="color:#f92672">/&gt;</span>
<span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;type&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;video&#34;</span><span style="color:#f92672">/&gt;</span>
<span style="display:block;width:100%;background-color:#3c3d38"><span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;seeders&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;635&#34;</span><span style="color:#f92672">/&gt;</span>
</span><span style="display:block;width:100%;background-color:#3c3d38"><span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;peers&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;39&#34;</span><span style="color:#f92672">/&gt;</span>
</span><span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;infohash&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;e2e457b2e77128cd20fafd0837bbdb9a4d543578&#34;</span><span style="color:#f92672">/&gt;</span>
<span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;minimumratio&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;1.0&#34;</span><span style="color:#f92672">/&gt;</span>
<span style="color:#f92672">&lt;torznab:attr</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;minimumseedtime&#34;</span> <span style="color:#a6e22e">value=</span><span style="color:#e6db74">&#34;172800&#34;</span><span style="color:#f92672">/&gt;</span></code></pre></div></p>

<p>which are not parsed by feedparser library.</p>

<p>Sh*t, now I am back to <a href="https://pypi.org/project/beautifulsoup4/" target="_blank">beautiful Soup</a> library to parse the html.
Wait for it&hellip;..
When I tried to parse, I came to know that beautifulsoup also supports parsing the xml(rss). Nice.
Now I wrote a script to parse them and display in the terminal.
The search argument is parsed using argparse library.</p>

<p>The output is sh*ty,
So, I used <a href="https://pypi.org/project/terminaltables/" target="_blank">terminal tables</a> library to get the clean output with the tables.</p>

<h1 id="output">Output</h1>

<p><img src="https://i.ibb.co/d5gxSZf/photo-2019-04-01-13-42-19.jpg" alt="output" /></p>

<p>The script is given below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"># Created by Selva &lt;selva@selvasoft.in&gt;
# © Selva
import requests
import argparse
import sys
from bs4 import BeautifulSoup
from terminaltables import SingleTable
from textwrap import wrap

baseURL = &#39;https://www.skytorrents.to/rss?search=&#39;

# Using in-built argparse library to parse the command line arguments 
parser = argparse.ArgumentParser(description=&#34;Search torrents from the command line easily.&#34;)
parser.add_argument(&#39;-i&#39;,&#39;--items&#39;,default=5,help=&#39;Number of items to display ( default: 5 )&#39;)
parser.add_argument(&#39;searchTerm&#39;,type=str,help=&#39;Search term to search for torrent&#39;)
args = parser.parse_args()
# Replacing the blank space(&#34; &#34;) with &#34;+&#34;, since the URL doesnt have any blank space
searchTerm = args.searchTerm.replace(&#39; &#39;,&#39;+&#39;)
num = args.items
r = requests.get(baseURL+searchTerm)
soup = BeautifulSoup(r.text,&#39;xml&#39;)
items = soup.find_all(&#39;item&#39;)
if len(items)==0:
    print(&#39;Item not found!!!&#39;)
    sys.exit()

def convertSize(size):
    size = round(size / 1024,2)
    suffix = &#39;KB&#39;
    if size &gt; 1000:
        size = round(size / 1024,2)
        suffix = &#39;MB&#39;
    if size &gt; 1000:
        size = round(size / 1024,2)
        suffix = &#39;GB&#39;    
    if size &gt; 1000:
        size = round(size / 1024,2)
        suffix = &#39;TB&#39;
    return ( str(size) + &#39; &#39; + suffix )

list1 = [ ]
mgntList = [ ]
list1.append([&#39;Index&#39;,&#39;Title&#39;,&#39;Date Added&#39;,&#39;Size&#39;,&#39;Seeders&#39;,&#39;Leechers&#39;])
for i in range(int(num)):
    item = items[i]
    tempList = [ ]
    tempList.append(str(i+1))
    tempList.append(item.title.text)
    mgntList.append(item.magneturl.text)
    tempList.append(item.pubDate.text[5:16])
    tempList.append(convertSize(int(item.size.text)))
    seeders = item.find(attrs={&#39;name&#39;:&#39;seeders&#39;})
    tempList.append(seeders[&#39;value&#39;])
    peers = item.find(attrs={&#39;name&#39;:&#39;peers&#39;})
    tempList.append(peers[&#39;value&#39;])
    list1.append(tempList)


cuteTable = SingleTable(list1)
max_width = cuteTable.column_max_width(1)
for i in range(1,len(list1)):
    row = list1[i]
    wrappedString = &#39;\n&#39;.join(wrap(row[1], max_width))
    cuteTable.table_data[i][1] = wrappedString +&#39;\n&#39;
    
print(cuteTable.table)
choice = int(input(&#39;\nEnter the index---&gt;&#39;))
print(&#39;\nThe magnet link is :\n&#39;)
print(mgntList[choice])</pre></div>
<p>Any doubts? Contact me. ( Social Links are in the home page )
<a href="https://selvasoft.in">Homepage</a></p>
]]></content>
        </item>
        
        <item>
            <title>How I Escaped From Mass Surveilance</title>
            <link>https://selvasoft.in/posts/how-i-escaped-from-mass-surveilance/</link>
            <pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate>
            
            <guid>https://selvasoft.in/posts/how-i-escaped-from-mass-surveilance/</guid>
            <description>Hello guys,
Do you guys wonder how much data corporations collect from us? I wondered about it so many times. How can anyone still give informations after knowing what anyone can do with that informations. In this post I am gonna show you how I escaped mass surveilance.
Social Network Most of you guys put everything in social network. Thats not a good practice. You are giving every information to a stalker.</description>
            <content type="html"><![CDATA[

<p>Hello guys,</p>

<p>Do you guys wonder how much data corporations collect from us?
I wondered about it so many times. How can anyone still give informations after knowing what
anyone can do with that informations. In this post I am gonna show you how I escaped mass surveilance.</p>

<h1 id="social-network">Social Network</h1>

<p>Most of you guys put everything in social network. Thats not a good practice. You are giving every information to a stalker.
Even if you put it only in for friends. NSA and CIA can access your data. By data means everything i.e your messages, private photos etc&hellip;.
So, what I did was deleted every social network that I was in. You have to delete every account you own in facebook and et al.
They have a huge list of services i.e facebook, instagram, tinder, whatsapp and increasing.
Delete all accounts in any of this services.</p>

<h1 id="the-big-brother">The big brother</h1>

<p>Google. Its essential for every things. Google search, youtube, playstore, maps, etc. You cant live without google. But we have to.
Delete your gmail account and get an email account in <a href="https://tutanota.com">tutanota</a> or <a href="https://protonmail.com">protonmail</a>.
I prefer tutanota.</p>

<h1 id="youtube">Youtube</h1>

<p>To use youtube you can go to <a href="https://invideo.us">invideo</a>. Its basically youtube without trackers and stuffs.</p>

<h1 id="instant-messaging">Instant messaging</h1>

<p>For instant messaging you can use telegram. Use only secret chat option to chat.</p>

<h1 id="browser">Browser</h1>

<p>Currently I am using qutebrowser and <a href="https://brave.com">brave</a>. Brave blocks trackers and ads by default.</p>

<h1 id="mobile">Mobile</h1>

<p>Ok. Here comes the main part. Google has a backdoor in your stock android os. It moniters everything you do in it. So, wipe that and install LineageOS.
It came from the ashes of CyanogenMOD.</p>

<p>Dont install GAPPS. Use fdroid. Fdroid only shows open source apps. Use only open source apps. Disable the location service entirely.</p>

<h1 id="edit-13-02-2019">Edit: (13.02.2019)</h1>

<p>I installed whatsapp again since my class group is not shifting to telegram. I missed most of the important messages.</p>
]]></content>
        </item>
        
        <item>
            <title>Kula chat</title>
            <link>https://selvasoft.in/posts/kula-chat/</link>
            <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
            
            <guid>https://selvasoft.in/posts/kula-chat/</guid>
            <description>Hello guys, I started to develop a open source client for telegram. It is available at gitlab link Lets see how to build the app.
Prerequisite  Download the prebuilt android library tdlib from this link Unzip the file into Kula-Chat root folder. Also you have to install android NDK.  Build instructions  You have to update the apiID and apiHASH in the MainActivity.java in both here and here  Hope you guys like it.</description>
            <content type="html"><![CDATA[

<p>Hello guys,
    I started to develop a open source client for telegram.
It is available at <a href="https://gitlab.com/Peratchiselvan/Kula-Chat">gitlab link</a>
Lets see how to build the app.</p>

<h1 id="prerequisite">Prerequisite</h1>

<ul>
<li>Download the prebuilt android library tdlib from <a href="https://core.telegram.org/tdlib/tdlib.zip">this link</a></li>
<li>Unzip the file into Kula-Chat root folder.</li>
<li>Also you have to install android NDK.</li>
</ul>

<h1 id="build-instructions">Build instructions</h1>

<ul>
<li>You have to update the apiID and apiHASH in the MainActivity.java
in both <a href="https://gitlab.com/Peratchiselvan/Kula-Chat/blob/master/app/src/main/java/io/github/peratchiselvan/kulachat/MainActivity.java#L38">here</a> and <a href="https://gitlab.com/Peratchiselvan/Kula-Chat/blob/master/app/src/main/java/io/github/peratchiselvan/kulachat/MainActivity.java#L76">here</a></li>
</ul>

<p>Hope you guys like it. And ofcourse dont forget to contribute.
Pull requests are welcome.</p>
]]></content>
        </item>
        
        <item>
            <title>Hello World!</title>
            <link>https://selvasoft.in/posts/hello/</link>
            <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
            
            <guid>https://selvasoft.in/posts/hello/</guid>
            <description>Hello people, For the past month, I have been thinking about starting a blog. I wanted to have full customization. So, I didn&amp;rsquo;t chose wordpress or blogger or any other corporate website creator. Remaining option is Static Site Generator. I searched for the best SSG. I seen Jekyll. But, Hugo seems to have more customization like JSON output,RSS feed etc. Which are needed because I planned to create an app for this blog.</description>
            <content type="html"><![CDATA[<p>Hello people,
    For the past month, I have been thinking about starting a blog.
I wanted to have full customization. So, I didn&rsquo;t chose wordpress or blogger or any other corporate website creator.
Remaining option is Static Site Generator. I searched for the best SSG.
I seen <a href="https://jekyllrb.com/" target="_blank">Jekyll</a>. But,
<a href="https://gohugo.io/" target="_blank">Hugo</a> seems to have more customization like JSON output,RSS feed etc.
Which are needed because I planned to create an app for this blog.
So, lets start this wonderful Journey.
And thanks <a href="https://gitlab.com/" target="_blank">Gitlab</a> for providing hosting free for this blog.</p>
]]></content>
        </item>
        
    </channel>
</rss>
